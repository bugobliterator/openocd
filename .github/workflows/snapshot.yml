# SPDX-License-Identifier: GPL-2.0-or-later

# Copyright (C) 2020 by Tarek BOUCHKATI <tarek.bouchkati@gmail.com>

on: push

name: OpenOCD Snapshot

jobs:
  prepare-release-info:
    runs-on: ubuntu-latest
    outputs:
      release_name: ${{ steps.set-release-info.outputs.release_name }}
      is_pre_release: ${{ steps.set-release-info.outputs.is_pre_release }}
      openocd_tag: ${{ steps.set-release-info.outputs.openocd_tag }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Set Release Info
        id: set-release-info
        run: |
          # check if there is tag pointing at HEAD, otherwise take the HEAD SHA-1 as OPENOCD_TAG
          OPENOCD_TAG="`git tag --points-at HEAD`"
          [ -z "$OPENOCD_TAG" ] && OPENOCD_TAG="`git rev-parse --short HEAD`"
          
          # check if there is tag pointing at HEAD, if so the release will have the same name as the tag,
          # otherwise it will be named 'latest'
          RELEASE_NAME="`git tag --points-at HEAD`"
          [ -z "$RELEASE_NAME" ] && RELEASE_NAME="latest"
          
          if [[ "$RELEASE_NAME" = "latest" ]]; then
            IS_PRE_RELEASE="true"
          else
            IS_PRE_RELEASE="false"
          fi
          
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
          echo "is_pre_release=$IS_PRE_RELEASE" >> $GITHUB_OUTPUT
          echo "openocd_tag=$OPENOCD_TAG" >> $GITHUB_OUTPUT

  # Windows build jobs with multiple architectures
  package-windows:
    runs-on: ubuntu-latest
    needs: prepare-release-info
    strategy:
      matrix:
        arch: [x86_64]
        include:
          - arch: x86_64
            host: x86_64-w64-mingw32
            packages: "g++-mingw-w64-x86-64"
            dll_suffix: "seh"
    env:
      DL_DIR: ../downloads
      BUILD_DIR: ../build
      OPENOCD_TAG: ${{ needs.prepare-release-info.outputs.openocd_tag }}
    steps:
      - name: Install needed packages
        run: |
          sudo apt-get update
          sudo apt-get install autotools-dev autoconf automake libtool pkg-config cmake texinfo texlive ${{ matrix.packages }}
      - name: Checkout Code
        uses: actions/checkout@v4
      - run: ./bootstrap
      - name: Prepare all dependencies
        env:
          LIBUSB1_VER: 1.0.26
          HIDAPI_VER: 0.13.1
          LIBFTDI_VER: 1.5
          CAPSTONE_VER: 4.0.2
          LIBJAYLINK_VER: 0.3.1
          JIMTCL_VER: 0.83
        run: |
          mkdir -p $DL_DIR && cd $DL_DIR
          
          # Download libusb1
          wget "https://github.com/libusb/libusb/releases/download/v${LIBUSB1_VER}/libusb-${LIBUSB1_VER}.tar.bz2"
          tar -xjf libusb-${LIBUSB1_VER}.tar.bz2
          echo "LIBUSB1_SRC=$PWD/libusb-${LIBUSB1_VER}" >> $GITHUB_ENV
          
          # Download hidapi
          wget "https://github.com/libusb/hidapi/archive/hidapi-${HIDAPI_VER}.tar.gz"
          tar -xzf hidapi-${HIDAPI_VER}.tar.gz
          cd hidapi-hidapi-${HIDAPI_VER}
          ./bootstrap
          echo "HIDAPI_SRC=$PWD" >> $GITHUB_ENV
          cd ..
          
          # Download libftdi
          wget "http://www.intra2net.com/en/developer/libftdi/download/libftdi1-${LIBFTDI_VER}.tar.bz2"
          tar -xjf libftdi1-${LIBFTDI_VER}.tar.bz2
          echo "LIBFTDI_SRC=$PWD/libftdi1-${LIBFTDI_VER}" >> $GITHUB_ENV
          
          # Download capstone
          wget "https://github.com/capstone-engine/capstone/archive/${CAPSTONE_VER}.tar.gz"
          tar -xzf ${CAPSTONE_VER}.tar.gz
          echo "CAPSTONE_SRC=$PWD/capstone-${CAPSTONE_VER}" >> $GITHUB_ENV
          
          # Download libjaylink
          wget --no-check-certificate https://gitlab.zapb.de/libjaylink/libjaylink/-/archive/${LIBJAYLINK_VER}/libjaylink-${LIBJAYLINK_VER}.tar.gz
          tar -xzf libjaylink-${LIBJAYLINK_VER}.tar.gz
          cd libjaylink-${LIBJAYLINK_VER}
          ./autogen.sh
          echo "LIBJAYLINK_SRC=$PWD" >> $GITHUB_ENV
          cd ..
          
          # Download jimtcl
          wget https://github.com/msteveb/jimtcl/archive/refs/tags/${JIMTCL_VER}.tar.gz
          tar -xzf ${JIMTCL_VER}.tar.gz
          echo "JIMTCL_SRC=$PWD/jimtcl-${JIMTCL_VER}" >> $GITHUB_ENV
      - name: Package OpenOCD for windows
        env:
          MAKE_JOBS: 2
          HOST: ${{ matrix.host }}
          LIBUSB1_CONFIG: --enable-static --disable-shared
          CAPSTONE_CONFIG: "CAPSTONE_BUILD_CORE_ONLY=yes CAPSTONE_STATIC=yes CAPSTONE_SHARED=no"
          LIBJAYLINK_CONFIG: --enable-static --disable-shared
          JIMTCL_CONFIG: --with-ext=json --minimal --disable-ssl
          OPENOCD_CONFIG: "--enable-stlink --enable-jlink --enable-cmsis-dap --enable-usbprog --enable-vsllink --enable-ti-icdi --enable-opendous --enable-osbdm --enable-aice --enable-usb-blaster-2 --enable-ft232r --enable-vsllink --enable-xds110 --enable-ulink --enable-arm-jtag-ew --enable-nulink"
        run: |
          # Create build structure
          mkdir -p $BUILD_DIR && cd $BUILD_DIR
          BUILD_DIR_ABS="$(pwd)"
          SYSROOT="$BUILD_DIR_ABS/sysroot"
          export SYSROOT
          
          # Build all dependencies using shared script
          bash $GITHUB_WORKSPACE/contrib/build-deps.sh windows $HOST
          
          # Build OpenOCD with static dependencies
          mkdir -p openocd && cd openocd
          export PKG_CONFIG_PATH="$SYSROOT/usr/lib/pkgconfig"
          CPPFLAGS="-I$SYSROOT/usr/include -I$SYSROOT/usr/include/libusb-1.0 -I$SYSROOT/usr/include/capstone -I$SYSROOT/usr/include/hidapi" \
          LDFLAGS="-static-libgcc -static-libstdc++ -L$SYSROOT/usr/lib" \
          LIBS="-lusb-1.0" \
          $GITHUB_WORKSPACE/configure \
            --host=$HOST \
            --prefix=/usr \
            --enable-static \
            --disable-shared \
            $OPENOCD_CONFIG
          make -j $MAKE_JOBS
          make install DESTDIR=$SYSROOT
          
          # add missing dlls for runtime (minimal set)
          cd $SYSROOT/usr
          cp `$HOST-gcc --print-file-name=libwinpthread-1.dll` ./bin/ || true
          cp `$HOST-gcc --print-file-name=libgcc_s_${{ matrix.dll_suffix }}-1.dll` ./bin/ || true
          
          # prepare the artifact
          ARTIFACT="openocd-${OPENOCD_TAG}-windows-${{ matrix.arch }}.tar.gz"
          tar -czf $ARTIFACT *
          echo "WINDOWS_ARTIFACT_PATH=$PWD/$ARTIFACT" >> $GITHUB_ENV
      - name: Upload Windows ${{ matrix.arch }} Build
        uses: actions/upload-artifact@v4
        with:
          name: openocd-windows-${{ matrix.arch }}
          path: ${{ env.WINDOWS_ARTIFACT_PATH }}

  # Linux build jobs with multiple architectures
  package-linux:
    runs-on: ubuntu-latest
    needs: prepare-release-info
    strategy:
      matrix:
        arch: [x86_64]
        include:
          - arch: x86_64
            host: x86_64-linux-gnu
    env:
      DL_DIR: ../downloads
      BUILD_DIR: ../build
      OPENOCD_TAG: ${{ needs.prepare-release-info.outputs.openocd_tag }}
    steps:
      - name: Install needed packages
        run: |
          sudo apt-get update
          sudo apt-get install autotools-dev autoconf automake libtool pkg-config cmake texinfo texlive libjim-dev libudev-dev
      - name: Checkout Code
        uses: actions/checkout@v4
      - run: ./bootstrap
      - name: Prepare all dependencies
        env:
          LIBUSB1_VER: 1.0.26
          HIDAPI_VER: 0.13.1
          LIBFTDI_VER: 1.5
          CAPSTONE_VER: 4.0.2
          LIBJAYLINK_VER: 0.3.1
          JIMTCL_VER: 0.83
        run: |
          mkdir -p $DL_DIR && cd $DL_DIR
          
          # Download libusb1
          wget "https://github.com/libusb/libusb/releases/download/v${LIBUSB1_VER}/libusb-${LIBUSB1_VER}.tar.bz2"
          tar -xjf libusb-${LIBUSB1_VER}.tar.bz2
          echo "LIBUSB1_SRC=$PWD/libusb-${LIBUSB1_VER}" >> $GITHUB_ENV
          
          # Download hidapi
          wget "https://github.com/libusb/hidapi/archive/hidapi-${HIDAPI_VER}.tar.gz"
          tar -xzf hidapi-${HIDAPI_VER}.tar.gz
          cd hidapi-hidapi-${HIDAPI_VER}
          ./bootstrap
          echo "HIDAPI_SRC=$PWD" >> $GITHUB_ENV
          cd ..
          
          # Download libftdi
          wget "http://www.intra2net.com/en/developer/libftdi/download/libftdi1-${LIBFTDI_VER}.tar.bz2"
          tar -xjf libftdi1-${LIBFTDI_VER}.tar.bz2
          echo "LIBFTDI_SRC=$PWD/libftdi1-${LIBFTDI_VER}" >> $GITHUB_ENV
          
          # Download capstone
          wget "https://github.com/capstone-engine/capstone/archive/${CAPSTONE_VER}.tar.gz"
          tar -xzf ${CAPSTONE_VER}.tar.gz
          echo "CAPSTONE_SRC=$PWD/capstone-${CAPSTONE_VER}" >> $GITHUB_ENV
          
          # Download libjaylink
          wget --no-check-certificate https://gitlab.zapb.de/libjaylink/libjaylink/-/archive/${LIBJAYLINK_VER}/libjaylink-${LIBJAYLINK_VER}.tar.gz
          tar -xzf libjaylink-${LIBJAYLINK_VER}.tar.gz
          cd libjaylink-${LIBJAYLINK_VER}
          ./autogen.sh
          echo "LIBJAYLINK_SRC=$PWD" >> $GITHUB_ENV
          cd ..
          
          # Download jimtcl
          wget https://github.com/msteveb/jimtcl/archive/refs/tags/${JIMTCL_VER}.tar.gz
          tar -xzf ${JIMTCL_VER}.tar.gz
          echo "JIMTCL_SRC=$PWD/jimtcl-${JIMTCL_VER}" >> $GITHUB_ENV
      - name: Package OpenOCD for Linux ${{ matrix.arch }}
        env:
          MAKE_JOBS: 2
          HOST: ${{ matrix.host }}
          LIBUSB1_CONFIG: --enable-static --disable-shared
          CAPSTONE_CONFIG: "CAPSTONE_BUILD_CORE_ONLY=yes CAPSTONE_STATIC=yes CAPSTONE_SHARED=no"
          LIBJAYLINK_CONFIG: --enable-static --disable-shared
          JIMTCL_CONFIG: --with-ext=json --minimal --disable-ssl
          OPENOCD_CONFIG: "--enable-stlink --enable-jlink --enable-cmsis-dap-v2 --enable-usbprog --enable-vsllink --enable-ti-icdi --enable-opendous --enable-osbdm --enable-aice --enable-usb-blaster-2 --enable-ft232r --enable-vsllink --enable-xds110 --enable-ulink --enable-arm-jtag-ew"
        run: |
          # Create build structure
          mkdir -p $BUILD_DIR && cd $BUILD_DIR
          BUILD_DIR_ABS="$(pwd)"
          SYSROOT="$BUILD_DIR_ABS/sysroot"
          export SYSROOT
          
          # Build all dependencies using shared script
          bash $GITHUB_WORKSPACE/contrib/build-deps.sh linux $HOST
          
          # Build OpenOCD with static dependencies
          mkdir -p openocd && cd openocd
          export PKG_CONFIG_PATH="$SYSROOT/usr/lib/pkgconfig"
          CPPFLAGS="-I$SYSROOT/usr/include -I$SYSROOT/usr/include/libusb-1.0 -I$SYSROOT/usr/include/capstone -I$SYSROOT/usr/include/hidapi -I$SYSROOT/usr/include/libftdi1" \
          LDFLAGS="-static -L$SYSROOT/usr/lib" \
          $GITHUB_WORKSPACE/configure \
            --prefix=/usr \
            --enable-static \
            --disable-shared \
            $OPENOCD_CONFIG
          make -j $MAKE_JOBS
          make install DESTDIR=$SYSROOT
          
          # prepare the artifact
          cd $SYSROOT/usr
          ARTIFACT="openocd-${OPENOCD_TAG}-linux-${{ matrix.arch }}.tar.gz"
          tar -czf $ARTIFACT *
          echo "LINUX_ARTIFACT_PATH=$PWD/$ARTIFACT" >> $GITHUB_ENV
      - name: Upload Linux ${{ matrix.arch }} Build
        uses: actions/upload-artifact@v4
        with:
          name: openocd-linux-${{ matrix.arch }}
          path: ${{ env.LINUX_ARTIFACT_PATH }}

  # macOS (Darwin) build jobs with multiple architectures
  package-darwin:
    runs-on: ${{ matrix.runner }}
    needs: prepare-release-info
    strategy:
      matrix:
        include:
          - arch: x86_64
            runner: macos-13
          - arch: arm64
            runner: macos-14
    env:
      BUILD_DIR: ../build
      OPENOCD_TAG: ${{ needs.prepare-release-info.outputs.openocd_tag }}
    steps:
      - name: Install needed packages with Homebrew
        run: |
          brew update
          # Install build tools only - we'll build dependencies from source
          brew install autoconf automake libtool pkg-config texinfo cmake

      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Prepare dependencies
        env:
          LIBUSB1_VER: 1.0.26
          HIDAPI_VER: 0.13.1
          LIBFTDI_VER: 1.5
          CAPSTONE_VER: 4.0.2
          LIBJAYLINK_VER: 0.3.1
          JIMTCL_VER: 0.83
          DL_DIR: ../downloads
        run: |
          mkdir -p $DL_DIR && cd $DL_DIR
          
          # Download libusb1
          curl -L "https://github.com/libusb/libusb/releases/download/v${LIBUSB1_VER}/libusb-${LIBUSB1_VER}.tar.bz2" -o "libusb-${LIBUSB1_VER}.tar.bz2"
          tar -xjf libusb-${LIBUSB1_VER}.tar.bz2
          echo "LIBUSB1_SRC=$PWD/libusb-${LIBUSB1_VER}" >> $GITHUB_ENV
          
          # Download hidapi
          curl -L "https://github.com/libusb/hidapi/archive/hidapi-${HIDAPI_VER}.tar.gz" -o "hidapi-${HIDAPI_VER}.tar.gz"
          tar -xzf hidapi-${HIDAPI_VER}.tar.gz
          cd hidapi-hidapi-${HIDAPI_VER}
          ./bootstrap
          echo "HIDAPI_SRC=$PWD" >> $GITHUB_ENV
          cd ..
          
          # Download libftdi
          curl -L "http://www.intra2net.com/en/developer/libftdi/download/libftdi1-${LIBFTDI_VER}.tar.bz2" -o "libftdi1-${LIBFTDI_VER}.tar.bz2"
          tar -xjf libftdi1-${LIBFTDI_VER}.tar.bz2
          echo "LIBFTDI_SRC=$PWD/libftdi1-${LIBFTDI_VER}" >> $GITHUB_ENV
          
          # Download capstone
          curl -L "https://github.com/capstone-engine/capstone/archive/${CAPSTONE_VER}.tar.gz" -o "${CAPSTONE_VER}.tar.gz"
          tar -xzf ${CAPSTONE_VER}.tar.gz
          echo "CAPSTONE_SRC=$PWD/capstone-${CAPSTONE_VER}" >> $GITHUB_ENV
          
          # Download libjaylink
          curl -L -k "https://gitlab.zapb.de/libjaylink/libjaylink/-/archive/${LIBJAYLINK_VER}/libjaylink-${LIBJAYLINK_VER}.tar.gz" -o "libjaylink-${LIBJAYLINK_VER}.tar.gz"
          tar -xzf libjaylink-${LIBJAYLINK_VER}.tar.gz
          cd libjaylink-${LIBJAYLINK_VER}
          ./autogen.sh
          echo "LIBJAYLINK_SRC=$PWD" >> $GITHUB_ENV
          cd ..
          
          # Download jimtcl
          curl -L "https://github.com/msteveb/jimtcl/archive/refs/tags/${JIMTCL_VER}.tar.gz" -o "${JIMTCL_VER}.tar.gz"
          tar -xzf ${JIMTCL_VER}.tar.gz
          echo "JIMTCL_SRC=$PWD/jimtcl-${JIMTCL_VER}" >> $GITHUB_ENV
      
      - name: Build dependencies and OpenOCD
        env:
          MAKE_JOBS: 4
          LIBUSB1_CONFIG: --enable-static --disable-shared
          CAPSTONE_CONFIG: "CAPSTONE_BUILD_CORE_ONLY=yes CAPSTONE_STATIC=yes CAPSTONE_SHARED=no"
          LIBJAYLINK_CONFIG: --enable-static --disable-shared
          JIMTCL_CONFIG: --with-ext=json --minimal --disable-ssl
          OPENOCD_CONFIG: "--enable-stlink --disable-amtjtagaccel"
        run: |
          ./bootstrap
          
          # Create build structure
          mkdir -p $BUILD_DIR && cd $BUILD_DIR
          BUILD_DIR_ABS="$(pwd)"
          SYSROOT="$BUILD_DIR_ABS/sysroot"
          export SYSROOT
          
          # Build all dependencies using shared script
          bash $GITHUB_WORKSPACE/contrib/build-deps.sh darwin ${{ matrix.arch }}-darwin
          
          # Build OpenOCD
          mkdir -p openocd && cd openocd
          export PKG_CONFIG_PATH="$SYSROOT/usr/lib/pkgconfig"
          
          # Set architecture-specific flags
          if [[ "${{ matrix.arch }}" == "arm64" ]]; then
            ARCH_FLAGS="-arch arm64"
          else
            ARCH_FLAGS="-arch x86_64"
          fi
          
          CPPFLAGS="-I$SYSROOT/usr/include -I$SYSROOT/usr/include/libusb-1.0 -I$SYSROOT/usr/include/capstone -I$SYSROOT/usr/include/hidapi -I$SYSROOT/usr/include/libftdi1" \
          LDFLAGS="$ARCH_FLAGS -L$SYSROOT/usr/lib -framework CoreFoundation -framework IOKit -framework Security -framework AppKit" \
          $GITHUB_WORKSPACE/configure \
            --prefix=/usr \
            --enable-static \
            --disable-shared \
            $OPENOCD_CONFIG
          make -j $MAKE_JOBS
          make install DESTDIR=$SYSROOT
          
          # Prepare the artifact
          cd $SYSROOT/usr
          ARTIFACT="openocd-${OPENOCD_TAG}-darwin-${{ matrix.arch }}.tar.gz"
          tar -czf $ARTIFACT *
          
          mkdir -p $GITHUB_WORKSPACE/artifacts
          cp $ARTIFACT $GITHUB_WORKSPACE/artifacts/
          
      - name: Upload Darwin ${{ matrix.arch }} Build
        uses: actions/upload-artifact@v4
        with:
          name: openocd-darwin-${{ matrix.arch }}
          path: artifacts/*.tar.gz

  # Final release job
  create-release:
    runs-on: ubuntu-latest
    needs: [prepare-release-info, package-windows, package-linux, package-darwin]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Delete 'latest' Release
        uses: dev-drprasad/delete-tag-and-release@v1.1
        if: ${{ needs.prepare-release-info.outputs.release_name == 'latest' }}
        with:
          delete_release: true
          tag_name: latest
          github_token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.prepare-release-info.outputs.release_name }}
          commit: ${{ github.sha }}
          draft: false
          artifacts: "artifacts/**/*.tar.gz"
          prerelease: ${{ needs.prepare-release-info.outputs.is_pre_release == 'true' }}
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
