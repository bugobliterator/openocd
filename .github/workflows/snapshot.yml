# SPDX-License-Identifier: GPL-2.0-or-later

# Copyright (C) 2020 by Tarek BOUCHKATI <tarek.bouchkati@gmail.com>

on: push

name: OpenOCD Snapshot

jobs:
  prepare-release-info:
    runs-on: ubuntu-latest
    outputs:
      release_name: ${{ steps.set-release-info.outputs.release_name }}
      is_pre_release: ${{ steps.set-release-info.outputs.is_pre_release }}
      openocd_tag: ${{ steps.set-release-info.outputs.openocd_tag }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Set Release Info
        id: set-release-info
        run: |
          # check if there is tag pointing at HEAD, otherwise take the HEAD SHA-1 as OPENOCD_TAG
          OPENOCD_TAG="`git tag --points-at HEAD`"
          [ -z "$OPENOCD_TAG" ] && OPENOCD_TAG="`git rev-parse --short HEAD`"
          
          # check if there is tag pointing at HEAD, if so the release will have the same name as the tag,
          # otherwise it will be named 'latest'
          RELEASE_NAME="`git tag --points-at HEAD`"
          [ -z "$RELEASE_NAME" ] && RELEASE_NAME="latest"
          
          if [[ "$RELEASE_NAME" = "latest" ]]; then
            IS_PRE_RELEASE="true"
          else
            IS_PRE_RELEASE="false"
          fi
          
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
          echo "is_pre_release=$IS_PRE_RELEASE" >> $GITHUB_OUTPUT
          echo "openocd_tag=$OPENOCD_TAG" >> $GITHUB_OUTPUT

  # Windows build jobs with multiple architectures
  package-windows:
    runs-on: ubuntu-latest
    needs: prepare-release-info
    strategy:
      matrix:
        arch: [x86_64]
        include:
          - arch: x86_64
            host: x86_64-w64-mingw32
            packages: "g++-mingw-w64-x86-64"
            dll_suffix: "seh"
    env:
      DL_DIR: ../downloads
      BUILD_DIR: ../build
      OPENOCD_TAG: ${{ needs.prepare-release-info.outputs.openocd_tag }}
    steps:
      - name: Install needed packages
        run: |
          sudo apt-get update
          sudo apt-get install autotools-dev autoconf automake libtool pkg-config cmake texinfo texlive ${{ matrix.packages }}
      - name: Checkout Code
        uses: actions/checkout@v4
      - run: ./bootstrap
      - name: Prepare libusb1
        env:
          LIBUSB1_VER: 1.0.26
        run: |
          mkdir -p $DL_DIR && cd $DL_DIR
          wget "https://github.com/libusb/libusb/releases/download/v${LIBUSB1_VER}/libusb-${LIBUSB1_VER}.tar.bz2"
          tar -xjf libusb-${LIBUSB1_VER}.tar.bz2
          echo "LIBUSB1_SRC=$PWD/libusb-${LIBUSB1_VER}" >> $GITHUB_ENV
      - name: Prepare hidapi
        env:
          HIDAPI_VER: 0.13.1
        run: |
          mkdir -p $DL_DIR && cd $DL_DIR
          wget "https://github.com/libusb/hidapi/archive/hidapi-${HIDAPI_VER}.tar.gz"
          tar -xzf hidapi-${HIDAPI_VER}.tar.gz
          cd hidapi-hidapi-${HIDAPI_VER}
          ./bootstrap
          echo "HIDAPI_SRC=$PWD" >> $GITHUB_ENV
      - name: Prepare libftdi
        env:
          LIBFTDI_VER: 1.5
        run: |
          mkdir -p $DL_DIR && cd $DL_DIR
          wget "http://www.intra2net.com/en/developer/libftdi/download/libftdi1-${LIBFTDI_VER}.tar.bz2"
          tar -xjf libftdi1-${LIBFTDI_VER}.tar.bz2
          echo "LIBFTDI_SRC=$PWD/libftdi1-${LIBFTDI_VER}" >> $GITHUB_ENV
      - name: Prepare capstone
        env:
          CAPSTONE_VER: 4.0.2
        run: |
          mkdir -p $DL_DIR && cd $DL_DIR
          CAPSTONE_NAME=${CAPSTONE_VER}
          CAPSTONE_FOLDER=capstone-${CAPSTONE_VER}
          wget "https://github.com/aquynh/capstone/archive/${CAPSTONE_VER}.tar.gz"
          tar -xzf ${CAPSTONE_VER}.tar.gz
          echo "CAPSTONE_SRC=$PWD/capstone-${CAPSTONE_VER}" >> $GITHUB_ENV
      - name: Prepare libjaylink
        env:
          LIBJAYLINK_VER: 0.3.1
        run: |
          mkdir -p $DL_DIR && cd $DL_DIR
          wget https://gitlab.zapb.de/libjaylink/libjaylink/-/archive/${LIBJAYLINK_VER}/libjaylink-${LIBJAYLINK_VER}.tar.gz
          tar -xzf libjaylink-${LIBJAYLINK_VER}.tar.gz
          cd libjaylink-${LIBJAYLINK_VER}
          ./autogen.sh
          echo "LIBJAYLINK_SRC=$PWD" >> $GITHUB_ENV
      - name: Prepare jimtcl
        env:
          JIMTCL_VER: 0.83
        run: |
          mkdir -p $DL_DIR && cd $DL_DIR
          wget https://github.com/msteveb/jimtcl/archive/refs/tags/${JIMTCL_VER}.tar.gz
          tar -xzf ${JIMTCL_VER}.tar.gz
          echo "JIMTCL_SRC=$PWD/jimtcl-${JIMTCL_VER}" >> $GITHUB_ENV
      - name: Package OpenOCD for windows
        env:
          MAKE_JOBS: 2
          HOST: ${{ matrix.host }}
          LIBUSB1_CONFIG: --enable-static --disable-shared
          LIBFTDI_CONFIG: -DSTATICLIBS=OFF -DEXAMPLES=OFF -DFTDI_EEPROM=OFF
          CAPSTONE_CONFIG: "CAPSTONE_BUILD_CORE_ONLY=yes CAPSTONE_STATIC=yes CAPSTONE_SHARED=no"
          LIBJAYLINK_CONFIG: --enable-static --disable-shared
          JIMTCL_CONFIG: --with-ext=json --minimal --disable-ssl
        run: |
          # set env and call cross-build.sh
          export OPENOCD_TAG=$OPENOCD_TAG
          export OPENOCD_SRC=$PWD
          export OPENOCD_CONFIG="--enable-ftdi --enable-stlink --enable-jlink --enable-cmsis-dap --enable-usbprog --enable-vsllink --enable-ti-icdi --enable-opendous --enable-osbdm --enable-presto --enable-aice --enable-usb-blaster-2 --enable-ft232r --enable-vsllink --enable-xds110 --enable-ulink --enable-arm-jtag-ew"
          mkdir -p $BUILD_DIR &&  cd $BUILD_DIR
          bash $OPENOCD_SRC/contrib/cross-build.sh $HOST
          # add missing dlls for static builds (if needed)
          cd $HOST-root/usr
          # For static builds, we may still need some runtime DLLs
          cp `$HOST-gcc --print-file-name=libwinpthread-1.dll` ./bin/ || true
          cp `$HOST-gcc --print-file-name=libgcc_s_${{ matrix.dll_suffix }}-1.dll` ./bin/ || true
          # prepare the artifact
          ARTIFACT="openocd-${OPENOCD_TAG}-windows-${{ matrix.arch }}.tar.gz"
          tar -czf $ARTIFACT *
          echo "WINDOWS_ARTIFACT_PATH=$PWD/$ARTIFACT" >> $GITHUB_ENV
      - name: Upload Windows ${{ matrix.arch }} Build
        uses: actions/upload-artifact@v4
        with:
          name: openocd-windows-${{ matrix.arch }}
          path: ${{ env.WINDOWS_ARTIFACT_PATH }}

  # Linux build jobs with multiple architectures
  package-linux:
    runs-on: ubuntu-latest
    needs: prepare-release-info
    strategy:
      matrix:
        arch: [x86_64, aarch64]
        include:
          - arch: x86_64
            host: x86_64-linux-gnu
          - arch: aarch64
            host: aarch64-linux-gnu
    env:
      DL_DIR: ../downloads
      BUILD_DIR: ../build
      OPENOCD_TAG: ${{ needs.prepare-release-info.outputs.openocd_tag }}
    steps:
      - name: Install needed packages
        run: |
          sudo apt-get update
          sudo apt-get install autotools-dev autoconf automake libtool pkg-config cmake texinfo texlive libjim-dev libudev-dev
          if [[ "${{ matrix.arch }}" == "aarch64" ]]; then
            sudo dpkg --add-architecture arm64
            # Configure sources to prevent arm64 package conflicts  
            # Handle both old .list files and new .sources files (deb822 format)
            sudo find /etc/apt/sources.list.d/ -name "*.sources" -exec sudo sed -i 's/^Architectures: .*/Architectures: amd64/' {} \;
            sudo find /etc/apt/sources.list.d/ -name "*.list" -exec sudo sed -i 's/^deb \[/deb [arch=amd64,/' {} \;
            sudo find /etc/apt/sources.list.d/ -name "*.list" -exec sudo sed -i 's/^deb http/deb [arch=amd64] http/' {} \;
            sudo find /etc/apt/sources.list.d/ -name "*.list" -exec sudo sed -i 's/^deb https/deb [arch=amd64] https/' {} \;
            # Add ports.ubuntu.com for arm64 packages only
            echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports noble main universe multiverse restricted" | sudo tee /etc/apt/sources.list.d/arm64.list
            echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports noble-updates main universe multiverse restricted" | sudo tee -a /etc/apt/sources.list.d/arm64.list
            echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports noble-security main universe multiverse restricted" | sudo tee -a /etc/apt/sources.list.d/arm64.list
            sudo apt-get update
            sudo apt-get install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
            sudo apt-get install libc6-dev-arm64-cross libudev-dev:arm64
          fi
      - name: Checkout Code
        uses: actions/checkout@v4
      - run: ./bootstrap
      - name: Prepare libusb1
        env:
          LIBUSB1_VER: 1.0.26
        run: |
          mkdir -p $DL_DIR && cd $DL_DIR
          wget "https://github.com/libusb/libusb/releases/download/v${LIBUSB1_VER}/libusb-${LIBUSB1_VER}.tar.bz2"
          tar -xjf libusb-${LIBUSB1_VER}.tar.bz2
          echo "LIBUSB1_SRC=$PWD/libusb-${LIBUSB1_VER}" >> $GITHUB_ENV
      - name: Prepare capstone
        env:
          CAPSTONE_VER: 4.0.2
        run: |
          mkdir -p $DL_DIR && cd $DL_DIR
          CAPSTONE_NAME=${CAPSTONE_VER}
          CAPSTONE_FOLDER=capstone-${CAPSTONE_VER}
          wget "https://github.com/aquynh/capstone/archive/${CAPSTONE_VER}.tar.gz"
          tar -xzf ${CAPSTONE_VER}.tar.gz
          echo "CAPSTONE_SRC=$PWD/capstone-${CAPSTONE_VER}" >> $GITHUB_ENV
      - name: Prepare libjaylink
        env:
          LIBJAYLINK_VER: 0.3.1
        run: |
          mkdir -p $DL_DIR && cd $DL_DIR
          wget https://gitlab.zapb.de/libjaylink/libjaylink/-/archive/${LIBJAYLINK_VER}/libjaylink-${LIBJAYLINK_VER}.tar.gz
          tar -xzf libjaylink-${LIBJAYLINK_VER}.tar.gz
          cd libjaylink-${LIBJAYLINK_VER}
          ./autogen.sh
          echo "LIBJAYLINK_SRC=$PWD" >> $GITHUB_ENV
      - name: Prepare jimtcl
        env:
          JIMTCL_VER: 0.83
        run: |
          mkdir -p $DL_DIR && cd $DL_DIR
          wget https://github.com/msteveb/jimtcl/archive/refs/tags/${JIMTCL_VER}.tar.gz
          tar -xzf ${JIMTCL_VER}.tar.gz
          echo "JIMTCL_SRC=$PWD/jimtcl-${JIMTCL_VER}" >> $GITHUB_ENV
      - name: Package OpenOCD for Linux ${{ matrix.arch }}
        env:
          MAKE_JOBS: 2
          HOST: ${{ matrix.host }}
          LIBUSB1_CONFIG: --enable-static --disable-shared
          CAPSTONE_CONFIG: "CAPSTONE_BUILD_CORE_ONLY=yes CAPSTONE_STATIC=yes CAPSTONE_SHARED=no"
          LIBJAYLINK_CONFIG: --enable-static --disable-shared
          JIMTCL_CONFIG: --with-ext=json --minimal --disable-ssl
          OPENOCD_CONFIG: "--enable-ftdi --enable-stlink --enable-jlink --enable-cmsis-dap-v2 --enable-usbprog --enable-vsllink --enable-ti-icdi --enable-opendous --enable-osbdm --enable-aice --enable-usb-blaster-2 --enable-ft232r --enable-vsllink --enable-xds110 --enable-ulink --enable-arm-jtag-ew"
        run: |
          # set env and call cross-build.sh
          export OPENOCD_TAG=$OPENOCD_TAG
          export OPENOCD_SRC=$PWD
          mkdir -p $BUILD_DIR && cd $BUILD_DIR
          
          bash $OPENOCD_SRC/contrib/cross-build.sh $HOST
          
          # prepare the artifact
          cd $HOST-root/usr
          ARTIFACT="openocd-${OPENOCD_TAG}-linux-${{ matrix.arch }}.tar.gz"
          tar -czf $ARTIFACT *
          echo "LINUX_ARTIFACT_PATH=$PWD/$ARTIFACT" >> $GITHUB_ENV
      - name: Upload Linux ${{ matrix.arch }} Build
        uses: actions/upload-artifact@v4
        with:
          name: openocd-linux-${{ matrix.arch }}
          path: ${{ env.LINUX_ARTIFACT_PATH }}

  # macOS (Darwin) build jobs with multiple architectures
  package-darwin:
    runs-on: ${{ matrix.runner }}
    needs: prepare-release-info
    strategy:
      matrix:
        include:
          - arch: x86_64
            runner: macos-13
          - arch: arm64
            runner: macos-14
    env:
      BUILD_DIR: ../build
      OPENOCD_TAG: ${{ needs.prepare-release-info.outputs.openocd_tag }}
    steps:
      - name: Install needed packages with Homebrew
        run: |
          brew update
          # Install build tools
          brew install autoconf automake libtool pkg-config texinfo
          
          # Install dependencies via Homebrew instead of manually building them
          brew install libusb hidapi libftdi capstone
          
          # Install optional dependencies
          brew install libusb-compat jimtcl

      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Bootstrap and Configure
        run: |
          ./bootstrap
          
          # Create build directory
          mkdir -p $BUILD_DIR && cd $BUILD_DIR
          # get absolute path to the build directory $BUILD_DIR
          BUILD_DIR_ABS="$(cd $BUILD_DIR && pwd)"
          
          # Set PKG_CONFIG_PATH to include Homebrew paths
          export PKG_CONFIG_PATH="$(brew --prefix)/lib/pkgconfig:$PKG_CONFIG_PATH"
          
          # Set CPPFLAGS and LDFLAGS for Homebrew dependencies
          export CPPFLAGS="-I$(brew --prefix)/include"
          export LDFLAGS="-L$(brew --prefix)/lib"
          
          # Configure with static linking and paths to Homebrew libraries
          $GITHUB_WORKSPACE/configure \
            --prefix=$BUILD_DIR_ABS/root/usr \
            --enable-stlink \
            --disable-amtjtagaccel \
            --enable-static \
            --disable-shared
      
      - name: Build and Install
        run: |
          cd $BUILD_DIR
          make -j$(sysctl -n hw.ncpu)
          make install
          
          # Prepare the artifact
          cd root/usr
          ARTIFACT="openocd-${OPENOCD_TAG}-darwin-${{ matrix.arch }}.tar.gz"
          tar -czf $ARTIFACT *
          
          mkdir -p $GITHUB_WORKSPACE/artifacts
          cp $ARTIFACT $GITHUB_WORKSPACE/artifacts/
          
      - name: Upload Darwin ${{ matrix.arch }} Build
        uses: actions/upload-artifact@v4
        with:
          name: openocd-darwin-${{ matrix.arch }}
          path: artifacts/*.tar.gz

  # Final release job
  create-release:
    runs-on: ubuntu-latest
    needs: [prepare-release-info, package-windows, package-linux, package-darwin]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Delete 'latest' Release
        uses: dev-drprasad/delete-tag-and-release@v1.1
        if: ${{ needs.prepare-release-info.outputs.release_name == 'latest' }}
        with:
          delete_release: true
          tag_name: latest
          github_token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.prepare-release-info.outputs.release_name }}
          commit: ${{ github.sha }}
          draft: false
          artifacts: "artifacts/**/*.tar.gz"
          prerelease: ${{ needs.prepare-release-info.outputs.is_pre_release == 'true' }}
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
